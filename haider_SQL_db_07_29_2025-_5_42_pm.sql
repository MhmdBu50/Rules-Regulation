-- =============================================
-- Complete Database Export: RRdb
-- Generated by: Haider
-- Date: 2025-01-29
-- Description: Full database export including all tables, data, and structure
-- =============================================

-- Create Database if not exists
IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'RRdb')
BEGIN
    CREATE DATABASE RRdb;
END
GO

USE RRdb;
GO

-- =============================================
-- DROP EXISTING TABLES (if they exist)
-- =============================================
IF OBJECT_ID('dbo.ChatbotInteractions', 'U') IS NOT NULL DROP TABLE dbo.ChatbotInteractions;
IF OBJECT_ID('dbo.Interactions', 'U') IS NOT NULL DROP TABLE dbo.Interactions;
IF OBJECT_ID('dbo.SearchLogs', 'U') IS NOT NULL DROP TABLE dbo.SearchLogs;
IF OBJECT_ID('dbo.Visits', 'U') IS NOT NULL DROP TABLE dbo.Visits;
IF OBJECT_ID('dbo.SavedRecords', 'U') IS NOT NULL DROP TABLE dbo.SavedRecords;
IF OBJECT_ID('dbo.RecordContacts', 'U') IS NOT NULL DROP TABLE dbo.RecordContacts;
IF OBJECT_ID('dbo.Attachments', 'U') IS NOT NULL DROP TABLE dbo.Attachments;
IF OBJECT_ID('dbo.History', 'U') IS NOT NULL DROP TABLE dbo.History;
IF OBJECT_ID('dbo.Records', 'U') IS NOT NULL DROP TABLE dbo.Records;
IF OBJECT_ID('dbo.ContactInformation', 'U') IS NOT NULL DROP TABLE dbo.ContactInformation;
IF OBJECT_ID('dbo.Departments', 'U') IS NOT NULL DROP TABLE dbo.Departments;
IF OBJECT_ID('dbo.Users', 'U') IS NOT NULL DROP TABLE dbo.Users;
IF OBJECT_ID('dbo.Admins', 'U') IS NOT NULL DROP TABLE dbo.Admins;
GO

-- =============================================
-- CREATE TABLES
-- =============================================

-- Users Table
CREATE TABLE dbo.Users (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Username NVARCHAR(100) NOT NULL UNIQUE,
    Email NVARCHAR(255) NOT NULL UNIQUE,
    PasswordHash NVARCHAR(500) NOT NULL,
    FirstName NVARCHAR(100),
    LastName NVARCHAR(100),
    PhoneNumber NVARCHAR(20),
    IsActive BIT DEFAULT 1,
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    UpdatedAt DATETIME2 DEFAULT GETDATE(),
    LastLoginAt DATETIME2
);

-- Admins Table
CREATE TABLE dbo.Admins (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Username NVARCHAR(100) NOT NULL UNIQUE,
    Email NVARCHAR(255) NOT NULL UNIQUE,
    PasswordHash NVARCHAR(500) NOT NULL,
    FirstName NVARCHAR(100),
    LastName NVARCHAR(100),
    Role NVARCHAR(50) DEFAULT 'Admin',
    IsActive BIT DEFAULT 1,
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    UpdatedAt DATETIME2 DEFAULT GETDATE(),
    LastLoginAt DATETIME2
);

-- Departments Table
CREATE TABLE dbo.Departments (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Name NVARCHAR(200) NOT NULL,
    NameArabic NVARCHAR(200),
    Description NVARCHAR(MAX),
    Code NVARCHAR(20) UNIQUE,
    IsActive BIT DEFAULT 1,
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    UpdatedAt DATETIME2 DEFAULT GETDATE()
);

-- Contact Information Table
CREATE TABLE dbo.ContactInformation (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Name NVARCHAR(200) NOT NULL,
    NameArabic NVARCHAR(200),
    Position NVARCHAR(200),
    Email NVARCHAR(255),
    Telephone NVARCHAR(20),
    Mobile NVARCHAR(20),
    Extension NVARCHAR(10),
    DepartmentId INT,
    IsActive BIT DEFAULT 1,
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    UpdatedAt DATETIME2 DEFAULT GETDATE(),
    FOREIGN KEY (DepartmentId) REFERENCES dbo.Departments(Id)
);

-- Records Table (Main regulations/policies table)
CREATE TABLE dbo.Records (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    RegulationName NVARCHAR(500) NOT NULL,
    RegulationNameArabic NVARCHAR(500),
    Description NVARCHAR(MAX),
    DescriptionArabic NVARCHAR(MAX),
    DocumentType NVARCHAR(100), -- 'Regulation', 'Guidelines', 'Policies'
    Sections NVARCHAR(200), -- 'Student', 'Members', 'Enrolled Program'
    Version NVARCHAR(50),
    VersionDate DATE,
    ApprovalDate DATE,
    ApprovingEntity NVARCHAR(300),
    Department NVARCHAR(300),
    DepartmentId INT,
    Notes NVARCHAR(MAX),
    IsActive BIT DEFAULT 1,
    ViewCount INT DEFAULT 0,
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    UpdatedAt DATETIME2 DEFAULT GETDATE(),
    CreatedBy INT,
    UpdatedBy INT,
    FOREIGN KEY (DepartmentId) REFERENCES dbo.Departments(Id),
    FOREIGN KEY (CreatedBy) REFERENCES dbo.Admins(Id),
    FOREIGN KEY (UpdatedBy) REFERENCES dbo.Admins(Id)
);

-- Attachments Table
CREATE TABLE dbo.Attachments (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    RecordId INT NOT NULL,
    OriginalName NVARCHAR(500) NOT NULL,
    StoredName NVARCHAR(500) NOT NULL,
    FilePath NVARCHAR(1000) NOT NULL,
    FileType NVARCHAR(50), -- 'PDF', 'Word', 'Excel', etc.
    FileSize BIGINT,
    MimeType NVARCHAR(200),
    IsActive BIT DEFAULT 1,
    UploadedAt DATETIME2 DEFAULT GETDATE(),
    UploadedBy INT,
    FOREIGN KEY (RecordId) REFERENCES dbo.Records(Id) ON DELETE CASCADE,
    FOREIGN KEY (UploadedBy) REFERENCES dbo.Admins(Id)
);

-- Record Contacts Junction Table
CREATE TABLE dbo.RecordContacts (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    RecordId INT NOT NULL,
    ContactId INT NOT NULL,
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    FOREIGN KEY (RecordId) REFERENCES dbo.Records(Id) ON DELETE CASCADE,
    FOREIGN KEY (ContactId) REFERENCES dbo.ContactInformation(Id),
    UNIQUE(RecordId, ContactId)
);

-- History Table (for tracking changes)
CREATE TABLE dbo.History (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    RecordId INT NOT NULL,
    Action NVARCHAR(50) NOT NULL, -- 'CREATE', 'UPDATE', 'DELETE'
    FieldName NVARCHAR(100),
    OldValue NVARCHAR(MAX),
    NewValue NVARCHAR(MAX),
    ChangedBy INT,
    ChangedAt DATETIME2 DEFAULT GETDATE(),
    FOREIGN KEY (RecordId) REFERENCES dbo.Records(Id),
    FOREIGN KEY (ChangedBy) REFERENCES dbo.Admins(Id)
);

-- Saved Records Table (for users to save favorite records)
CREATE TABLE dbo.SavedRecords (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    UserId INT NOT NULL,
    RecordId INT NOT NULL,
    SavedAt DATETIME2 DEFAULT GETDATE(),
    FOREIGN KEY (UserId) REFERENCES dbo.Users(Id) ON DELETE CASCADE,
    FOREIGN KEY (RecordId) REFERENCES dbo.Records(Id) ON DELETE CASCADE,
    UNIQUE(UserId, RecordId)
);

-- Visits Table (for tracking page visits and analytics)
CREATE TABLE dbo.Visits (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    RecordId INT,
    UserId INT,
    IPAddress NVARCHAR(45),
    UserAgent NVARCHAR(MAX),
    PageUrl NVARCHAR(1000),
    VisitedAt DATETIME2 DEFAULT GETDATE(),
    FOREIGN KEY (RecordId) REFERENCES dbo.Records(Id),
    FOREIGN KEY (UserId) REFERENCES dbo.Users(Id)
);

-- Search Logs Table
CREATE TABLE dbo.SearchLogs (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    SearchTerm NVARCHAR(500) NOT NULL,
    UserId INT,
    IPAddress NVARCHAR(45),
    ResultsCount INT DEFAULT 0,
    SearchedAt DATETIME2 DEFAULT GETDATE(),
    FOREIGN KEY (UserId) REFERENCES dbo.Users(Id)
);

-- Interactions Table (for general user interactions)
CREATE TABLE dbo.Interactions (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    UserId INT,
    InteractionType NVARCHAR(100), -- 'SEARCH', 'VIEW', 'DOWNLOAD', 'SAVE'
    RecordId INT,
    Details NVARCHAR(MAX),
    IPAddress NVARCHAR(45),
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    FOREIGN KEY (UserId) REFERENCES dbo.Users(Id),
    FOREIGN KEY (RecordId) REFERENCES dbo.Records(Id)
);

-- Chatbot Interactions Table
CREATE TABLE dbo.ChatbotInteractions (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    UserId INT,
    Question NVARCHAR(MAX) NOT NULL,
    Answer NVARCHAR(MAX),
    IsHelpful BIT,
    IPAddress NVARCHAR(45),
    CreatedAt DATETIME2 DEFAULT GETDATE(),
    FOREIGN KEY (UserId) REFERENCES dbo.Users(Id)
);

-- =============================================
-- INSERT SAMPLE DATA
-- =============================================

-- Insert Departments
INSERT INTO dbo.Departments (Name, NameArabic, Code, Description) VALUES
('Reg and Admission', 'القبول والتسجيل', 'REG', 'Registration and Admission Department'),
('CCSIT', 'كلية علوم الحاسب وتقنية المعلومات', 'CCSIT', 'College of Computer Science and Information Technology'),
('Communication and tech', 'الاتصالات والتقنية', 'COMM', 'Communication and Technology Department'),
('Hospital', 'المستشفى', 'HOSP', 'University Hospital'),
('Library', 'المكتبة', 'LIB', 'University Library'),
('Students Affairs', 'شؤون الطلاب', 'SA', 'Student Affairs Department'),
('Preparetory', 'السنة التحضيرية', 'PREP', 'Preparatory Year Program'),
('Academic Affairs', 'الشؤون الأكاديمية', 'AA', 'Academic Affairs Department');

-- Insert Sample Admin
INSERT INTO dbo.Admins (Username, Email, PasswordHash, FirstName, LastName, Role) VALUES
('admin', 'admin@iau.edu.sa', 'hashed_password_here', 'System', 'Administrator', 'SuperAdmin'),
('haider', 'haider@iau.edu.sa', 'hashed_password_here', 'Haider', 'Admin', 'Admin');

-- Insert Sample Contact Information
INSERT INTO dbo.ContactInformation (Name, NameArabic, Position, Email, Telephone, Mobile, DepartmentId) VALUES
('Dr. Ahmed Al-Saudi', 'د. أحمد السعودي', 'Department Head', 'ahmed@iau.edu.sa', '013-333-1234', '0501234567', 1),
('Ms. Fatima Al-Rashid', 'أ. فاطمة الراشد', 'Academic Advisor', 'fatima@iau.edu.sa', '013-333-1235', '0507654321', 2),
('Mr. Mohammed Al-Otaibi', 'أ. محمد العتيبي', 'IT Manager', 'mohammed@iau.edu.sa', '013-333-1236', '0502345678', 3),
('Dr. Sarah Al-Mansour', 'د. سارة المنصور', 'Medical Director', 'sarah@iau.edu.sa', '013-333-1237', '0508765432', 4),
('Ms. Noura Al-Fahd', 'أ. نورا الفهد', 'Chief Librarian', 'noura@iau.edu.sa', '013-333-1238', '0503456789', 5);

-- Insert Sample Records
INSERT INTO dbo.Records (RegulationName, RegulationNameArabic, Description, DescriptionArabic, DocumentType, Sections, Version, VersionDate, ApprovalDate, ApprovingEntity, Department, DepartmentId, CreatedBy) VALUES
('Student Code of Conduct', 'قواعد السلوك الطلابي', 'Code of conduct and behavior guidelines for all university students', 'قواعد السلوك والأخلاق لجميع طلاب الجامعة', 'Regulation', 'Student', '2.1', '2024-01-15', '2024-01-01', 'University Council', 'Students Affairs', 6, 1),
('Academic Integrity Policy', 'سياسة النزاهة الأكاديمية', 'Policies and procedures regarding academic honesty and integrity', 'السياسات والإجراءات المتعلقة بالنزاهة الأكاديمية', 'Policies', 'Student', '1.5', '2023-09-01', '2023-08-15', 'Academic Council', 'Academic Affairs', 8, 1),
('Faculty Employment Guidelines', 'دليل توظيف أعضاء هيئة التدريس', 'Guidelines for faculty recruitment and employment procedures', 'إرشادات توظيف أعضاء هيئة التدريس والإجراءات', 'Guidelines', 'Members', '3.0', '2024-02-01', '2024-01-20', 'HR Committee', 'Academic Affairs', 8, 1),
('IT Security Regulations', 'لوائح أمن المعلومات', 'Information technology security policies and procedures', 'سياسات وإجراءات أمن تقنية المعلومات', 'Regulation', 'Members', '2.3', '2023-11-15', '2023-11-01', 'IT Committee', 'Communication and tech', 3, 1),
('Library Usage Policy', 'سياسة استخدام المكتبة', 'Rules and regulations for using university library resources', 'قواعد ولوائح استخدام موارد المكتبة الجامعية', 'Policies', 'Student', '1.8', '2023-10-01', '2023-09-20', 'Library Committee', 'Library', 5, 1);

-- Insert Sample Users
INSERT INTO dbo.Users (Username, Email, PasswordHash, FirstName, LastName, PhoneNumber) VALUES
('student1', 'student1@iau.edu.sa', 'hashed_password', 'Ali', 'Al-Ahmad', '0501111111'),
('student2', 'student2@iau.edu.sa', 'hashed_password', 'Maryam', 'Al-Zahra', '0502222222'),
('faculty1', 'faculty1@iau.edu.sa', 'hashed_password', 'Dr. Omar', 'Al-Khaled', '0503333333');

-- =============================================
-- CREATE INDEXES FOR PERFORMANCE
-- =============================================
CREATE INDEX IX_Records_DocumentType ON dbo.Records(DocumentType);
CREATE INDEX IX_Records_Sections ON dbo.Records(Sections);
CREATE INDEX IX_Records_Department ON dbo.Records(Department);
CREATE INDEX IX_Records_IsActive ON dbo.Records(IsActive);
CREATE INDEX IX_Records_CreatedAt ON dbo.Records(CreatedAt);
CREATE INDEX IX_Visits_RecordId ON dbo.Visits(RecordId);
CREATE INDEX IX_Visits_VisitedAt ON dbo.Visits(VisitedAt);
CREATE INDEX IX_SearchLogs_SearchedAt ON dbo.SearchLogs(SearchedAt);
CREATE INDEX IX_Attachments_RecordId ON dbo.Attachments(RecordId);

-- =============================================
-- CREATE VIEWS FOR COMMON QUERIES
-- =============================================

-- View for Records with Contact Information
CREATE VIEW vw_RecordsWithContacts AS
SELECT 
    r.Id,
    r.RegulationName,
    r.RegulationNameArabic,
    r.Description,
    r.DocumentType,
    r.Sections,
    r.Version,
    r.ApprovalDate,
    r.ApprovingEntity,
    r.Department,
    r.ViewCount,
    c.Name as ContactName,
    c.Email as ContactEmail,
    c.Telephone as ContactTelephone,
    c.Mobile as ContactMobile
FROM dbo.Records r
LEFT JOIN dbo.RecordContacts rc ON r.Id = rc.RecordId
LEFT JOIN dbo.ContactInformation c ON rc.ContactId = c.Id
WHERE r.IsActive = 1;

-- View for Records with Attachments
CREATE VIEW vw_RecordsWithAttachments AS
SELECT 
    r.Id,
    r.RegulationName,
    r.DocumentType,
    r.Sections,
    a.Id as AttachmentId,
    a.OriginalName,
    a.FileType,
    a.FilePath
FROM dbo.Records r
LEFT JOIN dbo.Attachments a ON r.Id = a.RecordId
WHERE r.IsActive = 1 AND (a.IsActive = 1 OR a.IsActive IS NULL);

-- =============================================
-- STORED PROCEDURES
-- =============================================

-- Procedure to get popular records
CREATE PROCEDURE sp_GetPopularRecords
    @TopCount INT = 10
AS
BEGIN
    SELECT TOP (@TopCount)
        Id,
        RegulationName,
        DocumentType,
        Sections,
        ViewCount,
        CreatedAt
    FROM dbo.Records
    WHERE IsActive = 1
    ORDER BY ViewCount DESC;
END;

-- Procedure to increment view count
CREATE PROCEDURE sp_IncrementViewCount
    @RecordId INT
AS
BEGIN
    UPDATE dbo.Records 
    SET ViewCount = ViewCount + 1
    WHERE Id = @RecordId AND IsActive = 1;
END;

-- =============================================
-- FUNCTIONS
-- =============================================

-- Function to get records count by department
CREATE FUNCTION fn_GetRecordsCountByDepartment(@DepartmentName NVARCHAR(300))
RETURNS INT
AS
BEGIN
    DECLARE @Count INT;
    SELECT @Count = COUNT(*)
    FROM dbo.Records
    WHERE Department = @DepartmentName AND IsActive = 1;
    RETURN @Count;
END;

-- =============================================
-- TRIGGERS
-- =============================================

-- Trigger to log record changes
CREATE TRIGGER tr_Records_Audit
ON dbo.Records
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    
    INSERT INTO dbo.History (RecordId, Action, ChangedBy, ChangedAt)
    SELECT 
        i.Id,
        'UPDATE',
        i.UpdatedBy,
        GETDATE()
    FROM inserted i;
END;

-- =============================================
-- SAMPLE DATA UPDATES
-- =============================================

-- Update view counts for sample data
UPDATE dbo.Records SET ViewCount = 785 WHERE Id = 1; -- Student Code of Conduct
UPDATE dbo.Records SET ViewCount = 523 WHERE Id = 2; -- Academic Integrity Policy
UPDATE dbo.Records SET ViewCount = 342 WHERE Id = 3; -- Faculty Employment Guidelines
UPDATE dbo.Records SET ViewCount = 198 WHERE Id = 4; -- IT Security Regulations
UPDATE dbo.Records SET ViewCount = 156 WHERE Id = 5; -- Library Usage Policy

-- =============================================
-- BACKUP INFORMATION
-- =============================================
/*
Database Name: RRdb
Export Date: 2025-01-29
Total Tables: 13
Total Views: 2
Total Procedures: 2
Total Functions: 1
Total Triggers: 1

Tables Included:
1. Users
2. Admins
3. Departments
4. ContactInformation
5. Records
6. Attachments
7. RecordContacts
8. History
9. SavedRecords
10. Visits
11. SearchLogs
12. Interactions
13. ChatbotInteractions

Features:
- Complete table structure
- Sample data
- Indexes for performance
- Views for common queries
- Stored procedures
- Functions
- Triggers for auditing
- Foreign key relationships
- Default values
- Identity columns
*/

-- =============================================
-- END OF EXPORT
-- =============================================

PRINT 'Database RRdb export completed successfully!';
PRINT 'Total tables created: 13';
PRINT 'Sample data inserted for testing and demonstration.';
PRINT 'Created by: Haider';
PRINT 'Export Date: 2025-01-29';
