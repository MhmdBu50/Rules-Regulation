-- =============================================
-- Complete Oracle Database Export: RRdb
-- Generated by: Haider
-- Date: 2025-01-29
-- Description: Full Oracle database export including all tables, data, and structure
-- Oracle SQL Version
-- =============================================

-- Connect as SYSDBA or user with CREATE USER privileges
-- ALTER SESSION SET "_ORACLE_SCRIPT"=true;

-- Create User and Tablespace (if needed)
-- CREATE TABLESPACE RRdb_DATA DATAFILE 'RRdb_data.dbf' SIZE 100M AUTOEXTEND ON;
-- CREATE USER RRdb IDENTIFIED BY "RRdb123" DEFAULT TABLESPACE RRdb_DATA;
-- GRANT CONNECT, RESOURCE, DBA TO RRdb;

-- Connect as RRdb user
-- CONNECT RRdb/RRdb123;

-- =============================================
-- DROP EXISTING TABLES (if they exist)
-- =============================================
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE ChatbotInteractions CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Interactions CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE SearchLogs CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Visits CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE SavedRecords CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE RecordContacts CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Attachments CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE History CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Records CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE ContactInformation CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Departments CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Users CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE Admins CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

-- Drop Sequences
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE Users_SEQ';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE Admins_SEQ';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE Departments_SEQ';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE ContactInformation_SEQ';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE Records_SEQ';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE Attachments_SEQ';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE RecordContacts_SEQ';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE History_SEQ';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SavedRecords_SEQ';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE Visits_SEQ';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SearchLogs_SEQ';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE Interactions_SEQ';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE ChatbotInteractions_SEQ';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

-- =============================================
-- CREATE SEQUENCES
-- =============================================
CREATE SEQUENCE Users_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE Admins_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE Departments_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE ContactInformation_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE Records_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE Attachments_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE RecordContacts_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE History_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SavedRecords_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE Visits_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE SearchLogs_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE Interactions_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE ChatbotInteractions_SEQ START WITH 1 INCREMENT BY 1 NOCACHE;

-- =============================================
-- CREATE TABLES
-- =============================================

-- Users Table
CREATE TABLE Users (
    Id NUMBER PRIMARY KEY,
    Username NVARCHAR2(100) NOT NULL UNIQUE,
    Email NVARCHAR2(255) NOT NULL UNIQUE,
    PasswordHash NVARCHAR2(500) NOT NULL,
    FirstName NVARCHAR2(100),
    LastName NVARCHAR2(100),
    PhoneNumber NVARCHAR2(20),
    IsActive NUMBER(1) DEFAULT 1 CHECK (IsActive IN (0,1)),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    LastLoginAt TIMESTAMP
);

-- Admins Table
CREATE TABLE Admins (
    Id NUMBER PRIMARY KEY,
    Username NVARCHAR2(100) NOT NULL UNIQUE,
    Email NVARCHAR2(255) NOT NULL UNIQUE,
    PasswordHash NVARCHAR2(500) NOT NULL,
    FirstName NVARCHAR2(100),
    LastName NVARCHAR2(100),
    Role NVARCHAR2(50) DEFAULT 'Admin',
    IsActive NUMBER(1) DEFAULT 1 CHECK (IsActive IN (0,1)),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    LastLoginAt TIMESTAMP
);

-- Departments Table
CREATE TABLE Departments (
    Id NUMBER PRIMARY KEY,
    Name NVARCHAR2(200) NOT NULL,
    NameArabic NVARCHAR2(200),
    Description CLOB,
    Code NVARCHAR2(20) UNIQUE,
    IsActive NUMBER(1) DEFAULT 1 CHECK (IsActive IN (0,1)),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Contact Information Table
CREATE TABLE ContactInformation (
    Id NUMBER PRIMARY KEY,
    Name NVARCHAR2(200) NOT NULL,
    NameArabic NVARCHAR2(200),
    Position NVARCHAR2(200),
    Email NVARCHAR2(255),
    Telephone NVARCHAR2(20),
    Mobile NVARCHAR2(20),
    Extension NVARCHAR2(10),
    DepartmentId NUMBER,
    IsActive NUMBER(1) DEFAULT 1 CHECK (IsActive IN (0,1)),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_Contact_Department FOREIGN KEY (DepartmentId) REFERENCES Departments(Id)
);

-- Records Table (Main regulations/policies table)
CREATE TABLE Records (
    Id NUMBER PRIMARY KEY,
    RegulationName NVARCHAR2(500) NOT NULL,
    RegulationNameArabic NVARCHAR2(500),
    Description CLOB,
    DescriptionArabic CLOB,
    DocumentType NVARCHAR2(100), -- 'Regulation', 'Guidelines', 'Policies'
    Sections NVARCHAR2(200), -- 'Student', 'Members', 'Enrolled Program'
    Version NVARCHAR2(50),
    VersionDate DATE,
    ApprovalDate DATE,
    ApprovingEntity NVARCHAR2(300),
    Department NVARCHAR2(300),
    DepartmentId NUMBER,
    Notes CLOB,
    IsActive NUMBER(1) DEFAULT 1 CHECK (IsActive IN (0,1)),
    ViewCount NUMBER DEFAULT 0,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CreatedBy NUMBER,
    UpdatedBy NUMBER,
    CONSTRAINT FK_Records_Department FOREIGN KEY (DepartmentId) REFERENCES Departments(Id),
    CONSTRAINT FK_Records_CreatedBy FOREIGN KEY (CreatedBy) REFERENCES Admins(Id),
    CONSTRAINT FK_Records_UpdatedBy FOREIGN KEY (UpdatedBy) REFERENCES Admins(Id)
);

-- Attachments Table
CREATE TABLE Attachments (
    Id NUMBER PRIMARY KEY,
    RecordId NUMBER NOT NULL,
    OriginalName NVARCHAR2(500) NOT NULL,
    StoredName NVARCHAR2(500) NOT NULL,
    FilePath NVARCHAR2(1000) NOT NULL,
    FileType NVARCHAR2(50), -- 'PDF', 'Word', 'Excel', etc.
    FileSize NUMBER,
    MimeType NVARCHAR2(200),
    IsActive NUMBER(1) DEFAULT 1 CHECK (IsActive IN (0,1)),
    UploadedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UploadedBy NUMBER,
    CONSTRAINT FK_Attachments_Record FOREIGN KEY (RecordId) REFERENCES Records(Id) ON DELETE CASCADE,
    CONSTRAINT FK_Attachments_UploadedBy FOREIGN KEY (UploadedBy) REFERENCES Admins(Id)
);

-- Record Contacts Junction Table
CREATE TABLE RecordContacts (
    Id NUMBER PRIMARY KEY,
    RecordId NUMBER NOT NULL,
    ContactId NUMBER NOT NULL,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_RecordContacts_Record FOREIGN KEY (RecordId) REFERENCES Records(Id) ON DELETE CASCADE,
    CONSTRAINT FK_RecordContacts_Contact FOREIGN KEY (ContactId) REFERENCES ContactInformation(Id),
    CONSTRAINT UK_RecordContacts UNIQUE(RecordId, ContactId)
);

-- History Table (for tracking changes)
CREATE TABLE History (
    Id NUMBER PRIMARY KEY,
    RecordId NUMBER NOT NULL,
    Action NVARCHAR2(50) NOT NULL, -- 'CREATE', 'UPDATE', 'DELETE'
    FieldName NVARCHAR2(100),
    OldValue CLOB,
    NewValue CLOB,
    ChangedBy NUMBER,
    ChangedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_History_Record FOREIGN KEY (RecordId) REFERENCES Records(Id),
    CONSTRAINT FK_History_ChangedBy FOREIGN KEY (ChangedBy) REFERENCES Admins(Id)
);

-- Saved Records Table (for users to save favorite records)
CREATE TABLE SavedRecords (
    Id NUMBER PRIMARY KEY,
    UserId NUMBER NOT NULL,
    RecordId NUMBER NOT NULL,
    SavedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_SavedRecords_User FOREIGN KEY (UserId) REFERENCES Users(Id) ON DELETE CASCADE,
    CONSTRAINT FK_SavedRecords_Record FOREIGN KEY (RecordId) REFERENCES Records(Id) ON DELETE CASCADE,
    CONSTRAINT UK_SavedRecords UNIQUE(UserId, RecordId)
);

-- Visits Table (for tracking page visits and analytics)
CREATE TABLE Visits (
    Id NUMBER PRIMARY KEY,
    RecordId NUMBER,
    UserId NUMBER,
    IPAddress NVARCHAR2(45),
    UserAgent CLOB,
    PageUrl NVARCHAR2(1000),
    VisitedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_Visits_Record FOREIGN KEY (RecordId) REFERENCES Records(Id),
    CONSTRAINT FK_Visits_User FOREIGN KEY (UserId) REFERENCES Users(Id)
);

-- Search Logs Table
CREATE TABLE SearchLogs (
    Id NUMBER PRIMARY KEY,
    SearchTerm NVARCHAR2(500) NOT NULL,
    UserId NUMBER,
    IPAddress NVARCHAR2(45),
    ResultsCount NUMBER DEFAULT 0,
    SearchedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_SearchLogs_User FOREIGN KEY (UserId) REFERENCES Users(Id)
);

-- Interactions Table (for general user interactions)
CREATE TABLE Interactions (
    Id NUMBER PRIMARY KEY,
    UserId NUMBER,
    InteractionType NVARCHAR2(100), -- 'SEARCH', 'VIEW', 'DOWNLOAD', 'SAVE'
    RecordId NUMBER,
    Details CLOB,
    IPAddress NVARCHAR2(45),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_Interactions_User FOREIGN KEY (UserId) REFERENCES Users(Id),
    CONSTRAINT FK_Interactions_Record FOREIGN KEY (RecordId) REFERENCES Records(Id)
);

-- Chatbot Interactions Table
CREATE TABLE ChatbotInteractions (
    Id NUMBER PRIMARY KEY,
    UserId NUMBER,
    Question CLOB NOT NULL,
    Answer CLOB,
    IsHelpful NUMBER(1) CHECK (IsHelpful IN (0,1)),
    IPAddress NVARCHAR2(45),
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_ChatbotInteractions_User FOREIGN KEY (UserId) REFERENCES Users(Id)
);

-- =============================================
-- CREATE TRIGGERS FOR AUTO INCREMENT
-- =============================================
CREATE OR REPLACE TRIGGER Users_TRG
BEFORE INSERT ON Users
FOR EACH ROW
BEGIN
    :NEW.Id := Users_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER Admins_TRG
BEFORE INSERT ON Admins
FOR EACH ROW
BEGIN
    :NEW.Id := Admins_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER Departments_TRG
BEFORE INSERT ON Departments
FOR EACH ROW
BEGIN
    :NEW.Id := Departments_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER ContactInformation_TRG
BEFORE INSERT ON ContactInformation
FOR EACH ROW
BEGIN
    :NEW.Id := ContactInformation_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER Records_TRG
BEFORE INSERT ON Records
FOR EACH ROW
BEGIN
    :NEW.Id := Records_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER Attachments_TRG
BEFORE INSERT ON Attachments
FOR EACH ROW
BEGIN
    :NEW.Id := Attachments_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER RecordContacts_TRG
BEFORE INSERT ON RecordContacts
FOR EACH ROW
BEGIN
    :NEW.Id := RecordContacts_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER History_TRG
BEFORE INSERT ON History
FOR EACH ROW
BEGIN
    :NEW.Id := History_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER SavedRecords_TRG
BEFORE INSERT ON SavedRecords
FOR EACH ROW
BEGIN
    :NEW.Id := SavedRecords_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER Visits_TRG
BEFORE INSERT ON Visits
FOR EACH ROW
BEGIN
    :NEW.Id := Visits_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER SearchLogs_TRG
BEFORE INSERT ON SearchLogs
FOR EACH ROW
BEGIN
    :NEW.Id := SearchLogs_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER Interactions_TRG
BEFORE INSERT ON Interactions
FOR EACH ROW
BEGIN
    :NEW.Id := Interactions_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER ChatbotInteractions_TRG
BEFORE INSERT ON ChatbotInteractions
FOR EACH ROW
BEGIN
    :NEW.Id := ChatbotInteractions_SEQ.NEXTVAL;
END;
/

-- =============================================
-- INSERT SAMPLE DATA
-- =============================================

-- Insert Departments
INSERT INTO Departments (Name, NameArabic, Code, Description) VALUES
('Reg and Admission', 'القبول والتسجيل', 'REG', 'Registration and Admission Department');

INSERT INTO Departments (Name, NameArabic, Code, Description) VALUES
('CCSIT', 'كلية علوم الحاسب وتقنية المعلومات', 'CCSIT', 'College of Computer Science and Information Technology');

INSERT INTO Departments (Name, NameArabic, Code, Description) VALUES
('Communication and tech', 'الاتصالات والتقنية', 'COMM', 'Communication and Technology Department');

INSERT INTO Departments (Name, NameArabic, Code, Description) VALUES
('Hospital', 'المستشفى', 'HOSP', 'University Hospital');

INSERT INTO Departments (Name, NameArabic, Code, Description) VALUES
('Library', 'المكتبة', 'LIB', 'University Library');

INSERT INTO Departments (Name, NameArabic, Code, Description) VALUES
('Students Affairs', 'شؤون الطلاب', 'SA', 'Student Affairs Department');

INSERT INTO Departments (Name, NameArabic, Code, Description) VALUES
('Preparetory', 'السنة التحضيرية', 'PREP', 'Preparatory Year Program');

INSERT INTO Departments (Name, NameArabic, Code, Description) VALUES
('Academic Affairs', 'الشؤون الأكاديمية', 'AA', 'Academic Affairs Department');

-- Insert Sample Admin
INSERT INTO Admins (Username, Email, PasswordHash, FirstName, LastName, Role) VALUES
('admin', 'admin@iau.edu.sa', 'hashed_password_here', 'System', 'Administrator', 'SuperAdmin');

INSERT INTO Admins (Username, Email, PasswordHash, FirstName, LastName, Role) VALUES
('haider', 'haider@iau.edu.sa', 'hashed_password_here', 'Haider', 'Admin', 'Admin');

-- Insert Sample Contact Information
INSERT INTO ContactInformation (Name, NameArabic, Position, Email, Telephone, Mobile, DepartmentId) VALUES
('Dr. Ahmed Al-Saudi', 'د. أحمد السعودي', 'Department Head', 'ahmed@iau.edu.sa', '013-333-1234', '0501234567', 1);

INSERT INTO ContactInformation (Name, NameArabic, Position, Email, Telephone, Mobile, DepartmentId) VALUES
('Ms. Fatima Al-Rashid', 'أ. فاطمة الراشد', 'Academic Advisor', 'fatima@iau.edu.sa', '013-333-1235', '0507654321', 2);

INSERT INTO ContactInformation (Name, NameArabic, Position, Email, Telephone, Mobile, DepartmentId) VALUES
('Mr. Mohammed Al-Otaibi', 'أ. محمد العتيبي', 'IT Manager', 'mohammed@iau.edu.sa', '013-333-1236', '0502345678', 3);

INSERT INTO ContactInformation (Name, NameArabic, Position, Email, Telephone, Mobile, DepartmentId) VALUES
('Dr. Sarah Al-Mansour', 'د. سارة المنصور', 'Medical Director', 'sarah@iau.edu.sa', '013-333-1237', '0508765432', 4);

INSERT INTO ContactInformation (Name, NameArabic, Position, Email, Telephone, Mobile, DepartmentId) VALUES
('Ms. Noura Al-Fahd', 'أ. نورا الفهد', 'Chief Librarian', 'noura@iau.edu.sa', '013-333-1238', '0503456789', 5);

-- Insert Sample Records
INSERT INTO Records (RegulationName, RegulationNameArabic, Description, DescriptionArabic, DocumentType, Sections, Version, VersionDate, ApprovalDate, ApprovingEntity, Department, DepartmentId, CreatedBy) VALUES
('Student Code of Conduct', 'قواعد السلوك الطلابي', 'Code of conduct and behavior guidelines for all university students', 'قواعد السلوك والأخلاق لجميع طلاب الجامعة', 'Regulation', 'Student', '2.1', DATE '2024-01-15', DATE '2024-01-01', 'University Council', 'Students Affairs', 6, 1);

INSERT INTO Records (RegulationName, RegulationNameArabic, Description, DescriptionArabic, DocumentType, Sections, Version, VersionDate, ApprovalDate, ApprovingEntity, Department, DepartmentId, CreatedBy) VALUES
('Academic Integrity Policy', 'سياسة النزاهة الأكاديمية', 'Policies and procedures regarding academic honesty and integrity', 'السياسات والإجراءات المتعلقة بالنزاهة الأكاديمية', 'Policies', 'Student', '1.5', DATE '2023-09-01', DATE '2023-08-15', 'Academic Council', 'Academic Affairs', 8, 1);

INSERT INTO Records (RegulationName, RegulationNameArabic, Description, DescriptionArabic, DocumentType, Sections, Version, VersionDate, ApprovalDate, ApprovingEntity, Department, DepartmentId, CreatedBy) VALUES
('Faculty Employment Guidelines', 'دليل توظيف أعضاء هيئة التدريس', 'Guidelines for faculty recruitment and employment procedures', 'إرشادات توظيف أعضاء هيئة التدريس والإجراءات', 'Guidelines', 'Members', '3.0', DATE '2024-02-01', DATE '2024-01-20', 'HR Committee', 'Academic Affairs', 8, 1);

INSERT INTO Records (RegulationName, RegulationNameArabic, Description, DescriptionArabic, DocumentType, Sections, Version, VersionDate, ApprovalDate, ApprovingEntity, Department, DepartmentId, CreatedBy) VALUES
('IT Security Regulations', 'لوائح أمن المعلومات', 'Information technology security policies and procedures', 'سياسات وإجراءات أمن تقنية المعلومات', 'Regulation', 'Members', '2.3', DATE '2023-11-15', DATE '2023-11-01', 'IT Committee', 'Communication and tech', 3, 1);

INSERT INTO Records (RegulationName, RegulationNameArabic, Description, DescriptionArabic, DocumentType, Sections, Version, VersionDate, ApprovalDate, ApprovingEntity, Department, DepartmentId, CreatedBy) VALUES
('Library Usage Policy', 'سياسة استخدام المكتبة', 'Rules and regulations for using university library resources', 'قواعد ولوائح استخدام موارد المكتبة الجامعية', 'Policies', 'Student', '1.8', DATE '2023-10-01', DATE '2023-09-20', 'Library Committee', 'Library', 5, 1);

-- Insert Sample Users
INSERT INTO Users (Username, Email, PasswordHash, FirstName, LastName, PhoneNumber) VALUES
('student1', 'student1@iau.edu.sa', 'hashed_password', 'Ali', 'Al-Ahmad', '0501111111');

INSERT INTO Users (Username, Email, PasswordHash, FirstName, LastName, PhoneNumber) VALUES
('student2', 'student2@iau.edu.sa', 'hashed_password', 'Maryam', 'Al-Zahra', '0502222222');

INSERT INTO Users (Username, Email, PasswordHash, FirstName, LastName, PhoneNumber) VALUES
('faculty1', 'faculty1@iau.edu.sa', 'hashed_password', 'Dr. Omar', 'Al-Khaled', '0503333333');

-- =============================================
-- CREATE INDEXES FOR PERFORMANCE
-- =============================================
CREATE INDEX IX_Records_DocumentType ON Records(DocumentType);
CREATE INDEX IX_Records_Sections ON Records(Sections);
CREATE INDEX IX_Records_Department ON Records(Department);
CREATE INDEX IX_Records_IsActive ON Records(IsActive);
CREATE INDEX IX_Records_CreatedAt ON Records(CreatedAt);
CREATE INDEX IX_Visits_RecordId ON Visits(RecordId);
CREATE INDEX IX_Visits_VisitedAt ON Visits(VisitedAt);
CREATE INDEX IX_SearchLogs_SearchedAt ON SearchLogs(SearchedAt);
CREATE INDEX IX_Attachments_RecordId ON Attachments(RecordId);

-- =============================================
-- CREATE VIEWS FOR COMMON QUERIES
-- =============================================

-- View for Records with Contact Information
CREATE OR REPLACE VIEW vw_RecordsWithContacts AS
SELECT 
    r.Id,
    r.RegulationName,
    r.RegulationNameArabic,
    r.Description,
    r.DocumentType,
    r.Sections,
    r.Version,
    r.ApprovalDate,
    r.ApprovingEntity,
    r.Department,
    r.ViewCount,
    c.Name as ContactName,
    c.Email as ContactEmail,
    c.Telephone as ContactTelephone,
    c.Mobile as ContactMobile
FROM Records r
LEFT JOIN RecordContacts rc ON r.Id = rc.RecordId
LEFT JOIN ContactInformation c ON rc.ContactId = c.Id
WHERE r.IsActive = 1;

-- View for Records with Attachments
CREATE OR REPLACE VIEW vw_RecordsWithAttachments AS
SELECT 
    r.Id,
    r.RegulationName,
    r.DocumentType,
    r.Sections,
    a.Id as AttachmentId,
    a.OriginalName,
    a.FileType,
    a.FilePath
FROM Records r
LEFT JOIN Attachments a ON r.Id = a.RecordId
WHERE r.IsActive = 1 AND (a.IsActive = 1 OR a.IsActive IS NULL);

-- =============================================
-- STORED PROCEDURES
-- =============================================

-- Procedure to get popular records
CREATE OR REPLACE PROCEDURE sp_GetPopularRecords(
    p_TopCount IN NUMBER DEFAULT 10,
    p_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_cursor FOR
    SELECT *
    FROM (
        SELECT 
            Id,
            RegulationName,
            DocumentType,
            Sections,
            ViewCount,
            CreatedAt
        FROM Records
        WHERE IsActive = 1
        ORDER BY ViewCount DESC
    )
    WHERE ROWNUM <= p_TopCount;
END sp_GetPopularRecords;
/

-- Procedure to increment view count
CREATE OR REPLACE PROCEDURE sp_IncrementViewCount(
    p_RecordId IN NUMBER
)
AS
BEGIN
    UPDATE Records 
    SET ViewCount = ViewCount + 1
    WHERE Id = p_RecordId AND IsActive = 1;
    
    COMMIT;
END sp_IncrementViewCount;
/

-- =============================================
-- FUNCTIONS
-- =============================================

-- Function to get records count by department
CREATE OR REPLACE FUNCTION fn_GetRecordsCountByDepartment(
    p_DepartmentName IN NVARCHAR2
) RETURN NUMBER
AS
    v_Count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_Count
    FROM Records
    WHERE Department = p_DepartmentName AND IsActive = 1;
    
    RETURN v_Count;
END fn_GetRecordsCountByDepartment;
/

-- =============================================
-- TRIGGERS FOR AUDITING
-- =============================================

-- Trigger to log record changes
CREATE OR REPLACE TRIGGER tr_Records_Audit
AFTER UPDATE ON Records
FOR EACH ROW
BEGIN
    INSERT INTO History (RecordId, Action, ChangedBy, ChangedAt)
    VALUES (:NEW.Id, 'UPDATE', :NEW.UpdatedBy, CURRENT_TIMESTAMP);
END tr_Records_Audit;
/

-- =============================================
-- SAMPLE DATA UPDATES
-- =============================================

-- Update view counts for sample data
UPDATE Records SET ViewCount = 785 WHERE RegulationName = 'Student Code of Conduct';
UPDATE Records SET ViewCount = 523 WHERE RegulationName = 'Academic Integrity Policy';
UPDATE Records SET ViewCount = 342 WHERE RegulationName = 'Faculty Employment Guidelines';
UPDATE Records SET ViewCount = 198 WHERE RegulationName = 'IT Security Regulations';
UPDATE Records SET ViewCount = 156 WHERE RegulationName = 'Library Usage Policy';

-- Commit all changes
COMMIT;

-- =============================================
-- BACKUP INFORMATION
-- =============================================
/*
Oracle Database Name: RRdb
Export Date: 2025-01-29
Total Tables: 13
Total Views: 2
Total Procedures: 2
Total Functions: 1
Total Triggers: 14 (13 for auto-increment + 1 for auditing)
Total Sequences: 13

Oracle-Specific Features:
- Sequences for auto-increment
- Triggers for auto-increment
- CLOB for large text fields
- NUMBER data type instead of INT
- TIMESTAMP instead of DATETIME2
- Oracle-specific constraint syntax
- PL/SQL procedures and functions
- Oracle date literals

Tables Included:
1. Users
2. Admins
3. Departments
4. ContactInformation
5. Records
6. Attachments
7. RecordContacts
8. History
9. SavedRecords
10. Visits
11. SearchLogs
12. Interactions
13. ChatbotInteractions

Features:
- Complete Oracle table structure
- Sequences for primary key generation
- Auto-increment triggers
- Sample data with Arabic support
- Indexes for performance
- Views for common queries
- PL/SQL stored procedures
- Oracle functions
- Auditing triggers
- Foreign key relationships
- Check constraints
- Unique constraints
*/

-- =============================================
-- END OF ORACLE EXPORT
-- =============================================

PROMPT 'Oracle Database RRdb export completed successfully!';
PROMPT 'Total tables created: 13';
PROMPT 'Total sequences created: 13';
PROMPT 'Total triggers created: 14';
PROMPT 'Sample data inserted for testing and demonstration.';
PROMPT 'Created by: Haider';
PROMPT 'Export Date: 2025-01-29';
PROMPT 'Database Type: Oracle SQL';

-- Show table counts
SELECT 'Users' as TABLE_NAME, COUNT(*) as RECORD_COUNT FROM Users
UNION ALL
SELECT 'Admins', COUNT(*) FROM Admins
UNION ALL
SELECT 'Departments', COUNT(*) FROM Departments
UNION ALL
SELECT 'ContactInformation', COUNT(*) FROM ContactInformation
UNION ALL
SELECT 'Records', COUNT(*) FROM Records;

SPOOL OFF;
